-- ========= 1. boards 테이블 생성 =========
-- 관리자가 게시판을 생성하고 관리하는 테이블
CREATE TABLE public.boards (
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    name text NOT NULL,
    description text NULL,
    read_permission text NOT NULL DEFAULT 'user'::text, -- 'guest', 'user', 'admin'
    write_permission text NOT NULL DEFAULT 'user'::text, -- 'user', 'admin'
    CONSTRAINT boards_pkey PRIMARY KEY (id)
);

-- 테이블 및 컬럼에 대한 주석 추가 (가독성 향상)
COMMENT ON TABLE public.boards IS '게시판 정보를 저장하는 테이블';
COMMENT ON COLUMN public.boards.name IS '게시판 이름';
COMMENT ON COLUMN public.boards.description IS '게시판에 대한 간략한 설명';
COMMENT ON COLUMN public.boards.read_permission IS '게시판 읽기 권한 (guest: 비로그인, user: 로그인 사용자, admin: 관리자)';
COMMENT ON COLUMN public.boards.write_permission IS '게시판 쓰기 권한 (user: 로그인 사용자, admin: 관리자)';


-- ========= 2. posts 테이블 생성 =========
-- 사용자가 작성한 게시글을 저장하는 테이블
CREATE TABLE public.posts (
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    created_at timestamp with time zone NOT NULL DEFAULT now(),
    title text NOT NULL,
    content text NULL,
    user_id uuid NOT NULL DEFAULT auth.uid(),
    author_email text NULL,
    view_count integer NOT NULL DEFAULT 0,
    board_id uuid NOT NULL,
    CONSTRAINT posts_pkey PRIMARY KEY (id),
    CONSTRAINT posts_board_id_fkey FOREIGN KEY (board_id) REFERENCES public.boards(id) ON DELETE CASCADE,
    CONSTRAINT posts_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE
);

-- 테이블 및 컬럼에 대한 주석 추가
COMMENT ON TABLE public.posts IS '게시글 정보를 저장하는 테이블';
COMMENT ON COLUMN public.posts.title IS '게시글 제목';
COMMENT ON COLUMN public.posts.content IS '게시글 내용';
COMMENT ON COLUMN public.posts.user_id IS '작성자 ID (auth.users 테이블 참조)';
COMMENT ON COLUMN public.posts.author_email IS '작성자 이메일 (편의를 위해 저장)';
COMMENT ON COLUMN public.posts.view_count IS '조회수';
COMMENT ON COLUMN public.posts.board_id IS '게시글이 속한 게시판 ID (boards 테이블 참조)';

-- 인덱스 추가 (성능 향상)
CREATE INDEX posts_board_id_idx ON public.posts USING btree (board_id);
CREATE INDEX posts_user_id_idx ON public.posts USING btree (user_id);


-- ========= 3. RLS(Row Level Security) 활성화 =========
-- 각 테이블에 대해 행 수준 보안을 활성화합니다.
ALTER TABLE public.boards ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.posts ENABLE ROW LEVEL SECURITY;


-- ========= 4. 사용자 역할(Role)을 가져오는 헬퍼 함수 생성 =========
-- RLS 정책에서 사용자의 커스텀 역할('admin' 등)을 쉽게 가져오기 위한 함수입니다.
CREATE OR REPLACE FUNCTION public.get_user_role()
RETURNS text
LANGUAGE sql
SECURITY DEFINER
AS $$
  SELECT COALESCE(auth.jwt()->>'user_role', auth.jwt()->'app_metadata'->>'role', 'guest')::text;
$$;


-- ========= 5. boards 테이블에 대한 RLS 정책 설정 =========
-- 정책 1: 모든 사용자가 게시판 목록을 볼 수 있도록 허용
CREATE POLICY "Allow all users to read boards"
ON public.boards FOR SELECT
USING (true);

-- 정책 2: 'admin' 역할을 가진 사용자만 게시판을 생성, 수정, 삭제할 수 있도록 제한
CREATE POLICY "Allow admins to manage boards"
ON public.boards FOR ALL
USING (public.get_user_role() = 'admin')
WITH CHECK (public.get_user_role() = 'admin');


-- ========= 6. posts 테이블에 대한 RLS 정책 설정 =========
-- 정책 1: 게시판의 읽기 권한에 따라 게시글 조회를 허용
CREATE POLICY "Allow users to read posts based on board permission"
ON public.posts FOR SELECT
USING (
  EXISTS (
    SELECT 1
    FROM public.boards b
    WHERE b.id = posts.board_id
      AND (
        b.read_permission = 'guest' -- 'guest' 권한은 모두 허용
        OR (b.read_permission = 'user' AND auth.role() = 'authenticated') -- 'user' 권한은 로그인 사용자 허용
        OR (b.read_permission = 'admin' AND public.get_user_role() = 'admin') -- 'admin' 권한은 관리자 허용
      )
  )
);

-- 정책 2: 게시판의 쓰기 권한에 따라 게시글 생성을 허용
CREATE POLICY "Allow users to insert posts based on board permission"
ON public.posts FOR INSERT
WITH CHECK (
  EXISTS (
    SELECT 1
    FROM public.boards b
    WHERE b.id = posts.board_id
      AND (
        (b.write_permission = 'user' AND auth.role() = 'authenticated')
        OR (b.write_permission = 'admin' AND public.get_user_role() = 'admin')
      )
  )
  AND posts.user_id = auth.uid() -- 작성자는 반드시 자신이어야 함
);

-- 정책 3: 게시글 작성자 본인만 수정을 허용 (수정됨)
CREATE POLICY "Allow owner to update their own posts"
ON public.posts FOR UPDATE
USING (user_id = auth.uid());

-- 정책 4: 게시글 작성자 본인만 삭제를 허용 (수정됨)
CREATE POLICY "Allow owner to delete their own posts"
ON public.posts FOR DELETE
USING (user_id = auth.uid());
